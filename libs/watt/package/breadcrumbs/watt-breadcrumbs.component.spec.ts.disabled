
import { composeStory, createMountableStoryComponent } from '@storybook/testing-angular';
import { render, screen, waitForElementToBeRemoved } from '@testing-library/angular';
import { StoryFn } from '@storybook/angular';
import userEvent from '@testing-library/user-event';

import Meta, { Overview } from './watt-breadcrumbs.stories';
import { WattBreadcrumbsComponent } from './watt-breadcrumbs.component';

// TODO: Remove this when we have a better solution
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const overviewStory = composeStory(Overview as any, Meta as any) as unknown as StoryFn;

describe(WattBreadcrumbsComponent.name, () => {
  async function setup(story: StoryFn, clickSpy?: unknown) {
    const { component, ngModule } = createMountableStoryComponent(
      story({ onClick: clickSpy }, {} as never)
    );
    await render(component, { imports: [ngModule] });
  }

  const getSeperators = () => screen.getAllByRole('img'); // role of watt-icon is img
  const getBreadcrumbWithRouterLink = () => screen.queryByText('Breadcrumbs');
  const getBreadcrumbWithClick = () => screen.queryByText('Components');
  const getNoninteractiveBreadcrumb = () => screen.queryByText('Overview');

  it('should render correct amount of seperators', async () => {
    await setup(overviewStory);
    expect(getSeperators()).toHaveLength(2);
  });

  it('should render correct amount of links', async () => {
    await setup(overviewStory);
    expect(screen.getAllByRole('link')).toHaveLength(2);
  });

  it('should not render "Overview" as link', async () => {
    await setup(overviewStory);
    expect(getNoninteractiveBreadcrumb()).not.toHaveAttribute('role', 'link');
  });

  it('should mark breadcrumb with [routerLink] as interactive', async () => {
    await setup(overviewStory);
    expect(getBreadcrumbWithRouterLink()).toHaveClass('interactive');
  });

  it('should mark breadcrumb with (click) as interactive', async () => {
    await setup(overviewStory);
    expect(getBreadcrumbWithClick()).toHaveClass('interactive');
  });

  it('should navigate on click, when routerLink is added', async () => {
    await setup(overviewStory);
    const getDefaultRoute = () => screen.getByText('Route:Overview');
    const getExpectedRoute = () => screen.getByText('Route:Breadcrumbs');
    expect(getDefaultRoute()).toBeInTheDocument();

    userEvent.click(getBreadcrumbWithRouterLink() as HTMLElement);
    await waitForElementToBeRemoved(() => getDefaultRoute());

    expect(getExpectedRoute()).toBeInTheDocument();
  });

  it('should trigger click callback, when (click) is added', async () => {
    const mockFn = jest.fn();
    await setup(overviewStory, mockFn);

    userEvent.click(getBreadcrumbWithClick() as HTMLElement);

    expect(mockFn).toHaveBeenCalled();
  });
});
